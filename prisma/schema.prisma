generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  subscriptionId String?
  subscription  Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  databases     Database[]    
}

model Subscription {
  id             String  @id @default(uuid())
  name           String
  databaseLimit  Int
  apiLimit       Int
  users          User[]
}

model Database {
  id          String  @id @default(uuid())
  name        String
  type        String
  credentials Json    
  userId      String
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tables      Table[]
}
model Table {
  id         String   @id @default(uuid())
  name       String
  databaseId String   // Foreign key to Database
  database   Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)
  columns    Column[]
  apis       Api[]
}

model Column {
  id          String  @id @default(uuid())
  name        String
  dataType    String  // e.g., 'String', 'Int', 'Boolean'
  isRequired   Boolean @default(false)
  isUnique    Boolean @default(false)
  isPrimaryKey Boolean @default(false)
  tableId      String
  table        Table   @relation(fields: [tableId], references: [id], onDelete: Cascade)
}


model Api {
  id             String          @id @default(uuid())
  name           String
  route          String          // API Route/Endpoint
  method         String          // HTTP method (GET, POST, PUT, DELETE)
  tableId         String
  table           Table           @relation(fields: [tableId], references: [id], onDelete: Cascade)
  authentication Authentication?
  responseType   ResponseType?
}

// Authentication Settings for API
model Authentication {
  id        String @id @default(uuid())
  type      String // e.g., 'Bearer Token'
  apiKey    String? // Optional fields for specific auth types
  apiSecret String? 
  apiId     String @unique
  api       Api    @relation(fields: [apiId], references: [id], onDelete: Cascade)
}

// Response Type for API
model ResponseType {
  id     String @id @default(uuid())
  type   String // e.g., 'JSON', 'XML', 'HTML'
  apiId  String @unique
  api    Api    @relation(fields: [apiId], references: [id], onDelete: Cascade)
}
